/*
sass
Syntactically Awesome Style Sheet

 this file (theme.scss) should be added to angular.json styles 

 changes to angular.json file are not visible unless you recompile your application (ng serve)

 - the problem in css is that if you needed to change color for example in a file, 
 you have to change it in multiple places
 - we can use variables in scss

*/

@import "assets/scss/variables";

h1 {
  color: green;
}

$myColor: green;

h2 {
  color: $myColor;
}

// the preprocessor will convert this to css and give it to the browser

@mixin myMixin($thePreferredColor) {
  background-color: $thePreferredColor;
  padding: 5px;
  width: 25%
}

.box {
  @include myMixin(rgba(21, 195, 137, 0.274));
  color: black;
}

.modern-box {
  @include myMixin(rgb(209, 212, 37));
}

/*
themes
- primary is the website primary color
- secondary (accent) for sliders and buttons, ...
- warn is for the warnings

to pick the primary and secondary colors and 
https://material.io/tools/color/#!/?view.left=0&view.right=0

- in angular you can create your own theme and set the three colors in it

*/

// typography: is about changing the font weight and the font (times new roman)

  /*
    there are many languages that you can use to write your code, like sass, less and styleus
    They are the same, but they are different in syntax
    there are two versions of sass (.sass, .scss)
    sass is the old version, the less common, indentation oriented syntax and difficult to learn
    scss is similar to css syntax, easier to learn, it's the newer version and more common

    DRY, WET (don't repeat yourself - write everything twice)

    partials and imports allows you to devide a css into multiple files and then combine them for
    deployment to the web

    the underscore at the begingin of the file name identifies them as partials, and when you import them
    you import them in the styles file without the underscore or the file extension

    the css preprocessor will then combine all the partials in the file and convert them to one css file after any change of any partial

*/

p {
    color: $my-custom-variable;
}

/* 
    this feature is called nesting
    this code will be converted to css to be 
    ul li {} and ul a {} 
*/

ul {
    li {
        color: indigo;
    }
    
    a {
        color: forestgreen;
    }
}

